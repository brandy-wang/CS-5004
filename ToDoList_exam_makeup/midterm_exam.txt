				 MIDTERM EXAM		   CS5004 Fall 2024 Silicon Valley Prof Mark	     Thursday, 24 October 2024, from 1:00 PM until 3:30 PM	     				 INSTRUCTIONS				       Please download the attached unfinished code files and import them intoIntelliJ. (It is OK to ask a TA for help if you have difficulty with thisstep.) Your job is not to finish all the code, nor is it to find every possiblebug. There are three questions that you should focus on. You may use yourlaptop with IntelliJ. You may search the WWW. Please do not talk during theexam except to ask an instructional team member to clarify a question.  Pleasedo not copy and paste code you have not written yourself, whether from awebsite or a generative AI tool. Searching the web is allowed only to help youremember the name of a Class or the syntax for calling a method. Turn in yourwork on time. Submission consists of committing your changes, pushing yourmidterm folder to GitHub, and submitting the URL to Canvas. Late submissionswill be penalized 1 point per minute as determined by Canvas. The projectinvolves implementing a simple �To Do� list. Quickly skim the files provided toget the overall idea.This exam has three parts:1. Implement the following unfinished code: (8 points each)    a. The compare method in UrgencyComparator.java    b. The compareTo method in ToDoItemAbs.java    c. sortByUrgency and sortByImportance in ToDoList    d. Only the indicated tests in ToDoItemSchoolTest.java    e. An equals method and hashCode method in ToDoItemSchool (ONLY)    f. Javadocs for ToDoItemAbs -- ONLY THE INDICATED ONES2. There are at least five known bugs in ToDoItemPersonal.java. (This does not   include missing/incomplete Javadocs or tests -- ignore those. IntelliJ   WARNINGS also do not count. Only report five bugs, even if you find more.    a. Find five bugs. (2 points each)       // On a separate line, describe each bug with an inline comment    b. On a separate line,       // Summarize in English how to fix the bug (2 points each)    c. If time permits, implement your fixes (3 points each)3. Answer the five questions below by briefly by editing this file. Include it   in your GitHub folder.    a. What is the benefit of an abstract class in the ToDo example? (3 points)        An abstract class serves as a blueprint for various types of to-do items.        It promotes a consistent interface, enables code reuse, encapsulates shared state,        clarifies the class hierarchy, and enforces implementation across subclasses.        This leads to cleaner, more maintainable, and more robust code.    b. Why isn't there a toString method in the abstract class? (3 points)        Because all objects have their own toString() method.        This means that it's possible to print out something for any object that a program has created.    c. Why do ToDoItemsSchool and ToDoItemsPersonal invoke "super"? (3 points)        When a subclass inherits from a superclass, it also inherits its instance variables.        Calling super allows the subclass to initialize these inherited fields.    d. Why are the instance variables in ToDoItemAbs protected? (3 points)        To allow subclasses in ToDoItemAbs to access them while still restricting access from outside classes.    e. Name three key ideas of OOD with brief examples. (5 points)    Encapsulation    A dictionary that exposes only certain functions, not directly the word data.    Inheritance    Nouns, verbs, and adjectives all share common properties but each type adds its own rules    (like tense for verbs or comparative forms for adjectives).    Polymorphism    A method like useInSentence() behaves differently depending on whether it's called on a verb, noun, or adjective.